{"mappings":"AEKA,SAAS,EAAU,CAAG,EACpB,OAAO,EAAI,GAAG,CAAC,AAAC,GAAU,MAAM,OAAO,CAAC,GAAQ,EAAU,GAAQ,EACpE,CDHA,MAAM,EAAO,ICKE,MACb,aAAc,CACZ,IAAI,CAAC,KAAK,CAAG,MAAM,IAAI,CAAC,CAAE,OATX,CAS8B,EAAG,IACvC,MAAM,CAAY,IAAI,CAAC,IAGhC,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,MAChB,CAEA,UAAW,CACT,OAAO,EAAU,IAAI,CAAC,KAAK,CAC7B,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,WAAY,CACV,IAAI,EAAW,CAAA,EACX,EAAW,CAAA,EAEf,IAAK,IAAI,EAAM,EAAG,EA7BH,EA6BqB,IAClC,IAAK,IAAI,EAAM,EAAG,EA9BL,EA8BuB,IAAO,CACzC,IAAM,EAAO,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAEjC,GAAI,AAhCK,OAgCL,EACF,OAAQ,IAAI,CAAC,MAAM,CAAG,KAGX,CAAA,IAAT,GACF,CAAA,EAAW,CAAA,CADb,EAKE,CAAA,EAAO,GAAkB,IAAS,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAM,EAAE,EACzD,EAAM,GAAkB,IAAS,IAAI,CAAC,KAAK,CAAC,EAAM,EAAE,CAAC,EAAI,AAAJ,GAEtD,CAAA,EAAW,CAAA,CAJb,CAMF,QAGF,AAAI,GAAY,EACN,IAAI,CAAC,MAAM,CAAG,UAGhB,IAAI,CAAC,MAAM,CAAG,MACxB,CAEA,eAAgB,CACd,IAAM,EAAa,EAAE,CAErB,IAAK,IAAI,EAAM,EAAG,EA5DH,EA4DqB,IAClC,IAAK,IAAI,EAAM,EAAG,EA7DL,EA6DuB,IACL,IAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EACtB,EAAW,IAAI,CAAC,CAAE,IAAA,EAAK,IAAA,CAAI,GAKjC,GAAI,AAAsB,IAAtB,EAAW,MAAM,CACnB,OAGF,GAAM,CAAE,IAAK,CAAQ,CAAE,IAAK,CAAQ,CAAE,CACpC,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,AAE3D,CAAA,IAAI,CAAC,KAAK,CAAC,EAAS,CAAC,EAAS,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,EAC3D,IAAI,CAAC,QAAQ,CAAG,CAAC,CAAE,IAAK,EAAU,IAAK,CAAS,EAAE,AACpD,CAEA,gBAAgB,CAAG,CAAE,EAAW,IAAI,CAAE,EAAQ,CAAA,CAAK,CAAE,CACnD,IAAI,EAAW,EAAI,MAAM,CAAC,AAAC,GAAQ,AAAQ,IAAR,GAC7B,EAAS,EAAE,CAEjB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,MAAM,CAAG,EAAG,IACnC,CAAQ,CAAC,EAAE,GAAK,CAAQ,CAAC,EAAI,EAAE,GACjC,CAAQ,CAAC,EAAE,EAAI,EACf,IAAI,CAAC,KAAK,EAAI,CAAQ,CAAC,EAAE,CACzB,CAAQ,CAAC,EAAI,EAAE,CAAG,EAED,OAAb,IACE,EACF,EAAO,IAAI,CAAC,CAAE,IAAK,EAAG,IAAK,CAAS,GAEpC,EAAO,IAAI,CAAC,CAAE,IAAK,EAAU,IAAK,CAAE,KAQ5C,IAFA,EAAW,EAAS,MAAM,CAAC,AAAC,GAAQ,AAAQ,IAAR,GAE7B,EAAS,MAAM,CArGP,GAsGb,EAAS,IAAI,CAAC,GAKhB,OAFA,IAAI,CAAC,WAAW,CAAG,AAAC,CAAA,IAAI,CAAC,WAAW,EAAI,EAAC,AAAD,EAAI,MAAM,CAAC,GAE5C,CACT,CAEA,KAAK,CAAS,CAAE,CACd,GAAI,AAAgB,SAAhB,IAAI,CAAC,MAAM,CACb,OAGF,IAAI,EAAU,CAAA,EACR,EAAQ,EAAU,IAAI,CAAC,KAAK,CAElC,CAAA,IAAI,CAAC,QAAQ,CAAG,EAAE,CAClB,IAAI,CAAC,WAAW,CAAG,EAAE,CAErB,IAAM,EAAS,AAAC,GAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,CAAG,CAAC,EAAI,EAClD,EAAS,CAAC,EAAU,IACxB,EAAO,OAAO,CAAC,CAAC,EAAK,IAAS,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAS,CAAG,GAE5D,IAAK,IAAI,EAAI,EAAG,EA7HD,EA6HiB,IAAK,CACnC,IAAI,EAEJ,OAAQ,GACN,IAAK,OACH,EAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CACpB,EAAO,IAAI,CAAC,eAAe,CAAC,EAAM,EAAG,CAAA,GACrC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAG,EAChB,KACF,KAAK,QACH,EAAO,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,OAAO,GACjC,EAAO,IAAI,CAAC,eAAe,CAAC,EAAM,EAAG,CAAA,GAAO,OAAO,GACnD,IAAI,CAAC,KAAK,CAAC,EAAE,CAAG,EAChB,KACF,KAAK,KACH,EAAO,EAAO,GACd,EAAO,IAAI,CAAC,eAAe,CAAC,EAAM,EAAG,CAAA,GACrC,EAAO,EAAG,GACV,KACF,KAAK,OACH,EAAO,EAAO,GAAG,OAAO,GACxB,EAAO,IAAI,CAAC,eAAe,CAAC,EAAM,EAAG,CAAA,GAAM,OAAO,GAClD,EAAO,EAAG,EAEd,CAEK,GAAW,CAAK,CAAC,EAAE,CAAC,IAAI,KAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,IACpD,CAAA,EAAU,CAAA,CADZ,CAGF,CAEI,GACF,IAAI,CAAC,aAAa,EAEtB,CAEA,OAAQ,CACN,IAAI,CAAC,KAAK,CAAG,MAAM,IAAI,CAAC,CAAE,OAlKX,CAkK8B,EAAG,IACvC,MAAM,CAAY,IAAI,CAAC,IAEhC,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,UACd,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,aAAa,EACpB,CAEA,SAAU,CACR,IAAI,CAAC,KAAK,CAAG,MAAM,IAAI,CAAC,CAAE,OA5KX,CA4K8B,EAAG,IACvC,MAAM,CAAY,IAAI,CAAC,IAEhC,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,MAChB,CACF,ED/KM,EAAe,SAAS,aAAa,CAAC,eACtC,EAAQ,SAAS,gBAAgB,CAAC,eAClC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAgB,SAAS,aAAa,CAAC,mBAE7C,SAAS,IACP,EAAa,WAAW,CAAG,EAAK,QAAQ,GAEpB,SAAhB,EAAK,MAAM,EACb,EAAY,SAAS,CAAC,MAAM,CAAC,UAGX,QAAhB,EAAK,MAAM,EACb,EAAW,SAAS,CAAC,MAAM,CAAC,UAG9B,EAAK,KAAK,CAAC,OAAO,CAAC,CAAC,EAAK,KACvB,EAAI,OAAO,CAAC,CAAC,EAAM,KACjB,IAAM,EAAc,CAAK,CAAC,AAAW,EAAX,EAAe,EAAS,AAElD,CAAA,EAAY,WAAW,CAAG,AAAS,IAAT,EAAa,EAAO,GAC9C,EAAY,SAAS,CAAG,aAEX,IAAT,IACF,EAAY,SAAS,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAK,CAAC,EAG7C,EAAK,QAAQ,EAAE,KAAK,AAAC,GAAM,EAAE,GAAG,GAAK,GAAY,EAAE,GAAG,GAAK,KAE3D,EAAY,SAAS,CAAC,GAAG,CAAC,OAE1B,EAAY,gBAAgB,CAC1B,eACA,KACE,EAAY,SAAS,CAAC,MAAM,CAAC,MAC/B,EACA,CAAE,KAAM,CAAA,CAAK,IAKf,EAAK,WAAW,EAAE,KAChB,AAAC,GAAM,EAAE,GAAG,GAAK,GAAY,EAAE,GAAG,GAAK,KAGzC,EAAY,SAAS,CAAC,GAAG,CAAC,UAE1B,EAAY,gBAAgB,CAC1B,eACA,KACE,EAAY,SAAS,CAAC,MAAM,CAAC,SAC/B,EACA,CAAE,KAAM,CAAA,CAAK,IAIrB,EACF,EACF,CAEA,EAAY,gBAAgB,CAAC,QAAS,KACpC,EAAK,KAAK,GACV,EAAc,SAAS,CAAC,MAAM,CAAC,UAC/B,EAAY,SAAS,CAAC,GAAG,CAAC,UAC1B,EAAa,SAAS,CAAC,GAAG,CAAC,UAC3B,GACF,GAEA,EAAc,gBAAgB,CAAC,QAAS,KACtC,EAAK,OAAO,GACZ,EAAc,SAAS,CAAC,GAAG,CAAC,UAC5B,EAAY,SAAS,CAAC,MAAM,CAAC,UAC7B,EAAa,SAAS,CAAC,MAAM,CAAC,UAC9B,EAAY,SAAS,CAAC,GAAG,CAAC,UAC1B,EAAW,SAAS,CAAC,GAAG,CAAC,UAEzB,GACF,GAEA,SAAS,gBAAgB,CAAC,UAAW,AAAC,IACpC,IAAM,EAAa,CACjB,UAAW,OACX,WAAY,QACZ,QAAS,KACT,UAAW,MACb,CAEI,CAAA,CAAU,CAAC,EAAE,GAAG,CAAC,GACnB,EAAK,IAAI,CAAC,CAAU,CAAC,EAAE,GAAG,CAAC,EAC3B,IACA,EAAK,SAAS,GAElB","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nconst $a5fd07fa01589658$var$BOARD_SIZE = 4;\nconst $a5fd07fa01589658$var$WIN_TILE = 2048;\nfunction $a5fd07fa01589658$var$deepClone(arr) {\n    return arr.map((item)=>Array.isArray(item) ? $a5fd07fa01589658$var$deepClone(item) : item);\n}\nclass $a5fd07fa01589658$export$2e2bcd8739ae039 {\n    constructor(){\n        this.board = Array.from({\n            length: $a5fd07fa01589658$var$BOARD_SIZE\n        }, ()=>{\n            return Array($a5fd07fa01589658$var$BOARD_SIZE).fill(0);\n        });\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    getState() {\n        return $a5fd07fa01589658$var$deepClone(this.board);\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        let hasEmpty = false;\n        let hasMoves = false;\n        for(let row = 0; row < $a5fd07fa01589658$var$BOARD_SIZE; row++)for(let col = 0; col < $a5fd07fa01589658$var$BOARD_SIZE; col++){\n            const cell = this.board[row][col];\n            if (cell === $a5fd07fa01589658$var$WIN_TILE) return this.status = \"win\";\n            if (cell === 0) hasEmpty = true;\n            if (col < $a5fd07fa01589658$var$BOARD_SIZE - 1 && cell === this.board[row][col + 1] || row < $a5fd07fa01589658$var$BOARD_SIZE - 1 && cell === this.board[row + 1][col]) hasMoves = true;\n        }\n        if (hasEmpty || hasMoves) return this.status = \"playing\";\n        return this.status = \"lose\";\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let row = 0; row < $a5fd07fa01589658$var$BOARD_SIZE; row++){\n            for(let col = 0; col < $a5fd07fa01589658$var$BOARD_SIZE; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length === 0) return;\n        const { row: emptyRow, col: emptyCol } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.board[emptyRow][emptyCol] = Math.random() < 0.9 ? 2 : 4;\n        this.newTiles = [\n            {\n                row: emptyRow,\n                col: emptyCol\n            }\n        ];\n    }\n    shiftAndCombine(arr, rowIndex = null, isCol = false) {\n        let filtered = arr.filter((num)=>num !== 0);\n        const merged = [];\n        for(let i = 0; i < filtered.length - 1; i++)if (filtered[i] === filtered[i + 1]) {\n            filtered[i] *= 2;\n            this.score += filtered[i];\n            filtered[i + 1] = 0;\n            if (rowIndex !== null) {\n                if (isCol) merged.push({\n                    row: i,\n                    col: rowIndex\n                });\n                else merged.push({\n                    row: rowIndex,\n                    col: i\n                });\n            }\n        }\n        filtered = filtered.filter((num)=>num !== 0);\n        while(filtered.length < $a5fd07fa01589658$var$BOARD_SIZE)filtered.push(0);\n        this.mergedTiles = (this.mergedTiles || []).concat(merged);\n        return filtered;\n    }\n    move(direction) {\n        if (this.status === \"idle\") return;\n        let changed = false;\n        const board = $a5fd07fa01589658$var$deepClone(this.board);\n        this.newTiles = [];\n        this.mergedTiles = [];\n        const getCol = (col)=>this.board.map((row)=>row[col]);\n        const setCol = (colIndex, newCol)=>newCol.forEach((val, row)=>this.board[row][colIndex] = val);\n        for(let i = 0; i < $a5fd07fa01589658$var$BOARD_SIZE; i++){\n            let line;\n            switch(direction){\n                case \"left\":\n                    line = this.board[i];\n                    line = this.shiftAndCombine(line, i, false);\n                    this.board[i] = line;\n                    break;\n                case \"right\":\n                    line = [\n                        ...this.board[i]\n                    ].reverse();\n                    line = this.shiftAndCombine(line, i, false).reverse();\n                    this.board[i] = line;\n                    break;\n                case \"up\":\n                    line = getCol(i);\n                    line = this.shiftAndCombine(line, i, true);\n                    setCol(i, line);\n                    break;\n                case \"down\":\n                    line = getCol(i).reverse();\n                    line = this.shiftAndCombine(line, i, true).reverse();\n                    setCol(i, line);\n                    break;\n            }\n            if (!changed && board[i].join() !== this.board[i].join()) changed = true;\n        }\n        if (changed) this.addRandomTile();\n    }\n    start() {\n        this.board = Array.from({\n            length: $a5fd07fa01589658$var$BOARD_SIZE\n        }, ()=>{\n            return Array($a5fd07fa01589658$var$BOARD_SIZE).fill(0);\n        });\n        this.score = 0;\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    restart() {\n        this.board = Array.from({\n            length: $a5fd07fa01589658$var$BOARD_SIZE\n        }, ()=>{\n            return Array($a5fd07fa01589658$var$BOARD_SIZE).fill(0);\n        });\n        this.score = 0;\n        this.status = \"idle\";\n    }\n}\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)();\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$restartButton = document.querySelector(\".button.restart\");\nfunction $09e991522ca7e64e$var$renderBoard() {\n    $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n    if ($09e991522ca7e64e$var$game.status === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.status === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$game.board.forEach((row, rowIndex)=>{\n        row.forEach((cell, colIndex)=>{\n            const cellElement = $09e991522ca7e64e$var$cells[rowIndex * 4 + colIndex];\n            cellElement.textContent = cell !== 0 ? cell : \"\";\n            cellElement.className = \"field-cell\";\n            if (cell !== 0) {\n                cellElement.classList.add(`field-cell--${cell}`);\n                if ($09e991522ca7e64e$var$game.newTiles?.some((t)=>t.row === rowIndex && t.col === colIndex)) {\n                    cellElement.classList.add(\"new\");\n                    cellElement.addEventListener(\"animationend\", ()=>{\n                        cellElement.classList.remove(\"new\");\n                    }, {\n                        once: true\n                    });\n                }\n                if ($09e991522ca7e64e$var$game.mergedTiles?.some((t)=>t.row === rowIndex && t.col === colIndex)) {\n                    cellElement.classList.add(\"merged\");\n                    cellElement.addEventListener(\"animationend\", ()=>{\n                        cellElement.classList.remove(\"merged\");\n                    }, {\n                        once: true\n                    });\n                }\n            }\n        });\n    });\n}\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$restartButton.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$startButton.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$renderBoard();\n});\n$09e991522ca7e64e$var$restartButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$restartButton.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startButton.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$renderBoard();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    const directions = {\n        ArrowLeft: \"left\",\n        ArrowRight: \"right\",\n        ArrowUp: \"up\",\n        ArrowDown: \"down\"\n    };\n    if (directions[e.key]) {\n        $09e991522ca7e64e$var$game.move(directions[e.key]);\n        $09e991522ca7e64e$var$renderBoard();\n        $09e991522ca7e64e$var$game.getStatus();\n    }\n});\n\n\n//# sourceMappingURL=index.c71cc97a.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\nconst scoreElement = document.querySelector('.game-score');\nconst cells = document.querySelectorAll('.field-cell');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst startButton = document.querySelector('.button.start');\nconst restartButton = document.querySelector('.button.restart');\n\nfunction renderBoard() {\n  scoreElement.textContent = game.getScore();\n\n  if (game.status === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n\n  if (game.status === 'win') {\n    messageWin.classList.remove('hidden');\n  }\n\n  game.board.forEach((row, rowIndex) => {\n    row.forEach((cell, colIndex) => {\n      const cellElement = cells[rowIndex * 4 + colIndex];\n\n      cellElement.textContent = cell !== 0 ? cell : '';\n      cellElement.className = 'field-cell';\n\n      if (cell !== 0) {\n        cellElement.classList.add(`field-cell--${cell}`);\n\n        if (\n          game.newTiles?.some((t) => t.row === rowIndex && t.col === colIndex)\n        ) {\n          cellElement.classList.add('new');\n\n          cellElement.addEventListener(\n            'animationend',\n            () => {\n              cellElement.classList.remove('new');\n            },\n            { once: true },\n          );\n        }\n\n        if (\n          game.mergedTiles?.some(\n            (t) => t.row === rowIndex && t.col === colIndex,\n          )\n        ) {\n          cellElement.classList.add('merged');\n\n          cellElement.addEventListener(\n            'animationend',\n            () => {\n              cellElement.classList.remove('merged');\n            },\n            { once: true },\n          );\n        }\n      }\n    });\n  });\n}\n\nstartButton.addEventListener('click', () => {\n  game.start();\n  restartButton.classList.remove('hidden');\n  startButton.classList.add('hidden');\n  messageStart.classList.add('hidden');\n  renderBoard();\n});\n\nrestartButton.addEventListener('click', () => {\n  game.restart();\n  restartButton.classList.add('hidden');\n  startButton.classList.remove('hidden');\n  messageStart.classList.remove('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  renderBoard();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  const directions = {\n    ArrowLeft: 'left',\n    ArrowRight: 'right',\n    ArrowUp: 'up',\n    ArrowDown: 'down',\n  };\n\n  if (directions[e.key]) {\n    game.move(directions[e.key]);\n    renderBoard();\n    game.getStatus();\n  }\n});\n","'use strict';\n\nconst BOARD_SIZE = 4;\nconst WIN_TILE = 2048;\n\nfunction deepClone(arr) {\n  return arr.map((item) => (Array.isArray(item) ? deepClone(item) : item));\n}\n\nexport default class Game {\n  constructor() {\n    this.board = Array.from({ length: BOARD_SIZE }, () => {\n      return Array(BOARD_SIZE).fill(0);\n    });\n\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  getState() {\n    return deepClone(this.board);\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    let hasEmpty = false;\n    let hasMoves = false;\n\n    for (let row = 0; row < BOARD_SIZE; row++) {\n      for (let col = 0; col < BOARD_SIZE; col++) {\n        const cell = this.board[row][col];\n\n        if (cell === WIN_TILE) {\n          return (this.status = 'win');\n        }\n\n        if (cell === 0) {\n          hasEmpty = true;\n        }\n\n        if (\n          (col < BOARD_SIZE - 1 && cell === this.board[row][col + 1]) ||\n          (row < BOARD_SIZE - 1 && cell === this.board[row + 1][col])\n        ) {\n          hasMoves = true;\n        }\n      }\n    }\n\n    if (hasEmpty || hasMoves) {\n      return (this.status = 'playing');\n    }\n\n    return (this.status = 'lose');\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < BOARD_SIZE; row++) {\n      for (let col = 0; col < BOARD_SIZE; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const { row: emptyRow, col: emptyCol } =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[emptyRow][emptyCol] = Math.random() < 0.9 ? 2 : 4;\n    this.newTiles = [{ row: emptyRow, col: emptyCol }];\n  }\n\n  shiftAndCombine(arr, rowIndex = null, isCol = false) {\n    let filtered = arr.filter((num) => num !== 0);\n    const merged = [];\n\n    for (let i = 0; i < filtered.length - 1; i++) {\n      if (filtered[i] === filtered[i + 1]) {\n        filtered[i] *= 2;\n        this.score += filtered[i];\n        filtered[i + 1] = 0;\n\n        if (rowIndex !== null) {\n          if (isCol) {\n            merged.push({ row: i, col: rowIndex });\n          } else {\n            merged.push({ row: rowIndex, col: i });\n          }\n        }\n      }\n    }\n\n    filtered = filtered.filter((num) => num !== 0);\n\n    while (filtered.length < BOARD_SIZE) {\n      filtered.push(0);\n    }\n\n    this.mergedTiles = (this.mergedTiles || []).concat(merged);\n\n    return filtered;\n  }\n\n  move(direction) {\n    if (this.status === 'idle') {\n      return;\n    }\n\n    let changed = false;\n    const board = deepClone(this.board);\n\n    this.newTiles = [];\n    this.mergedTiles = [];\n\n    const getCol = (col) => this.board.map((row) => row[col]);\n    const setCol = (colIndex, newCol) =>\n      newCol.forEach((val, row) => (this.board[row][colIndex] = val));\n\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      let line;\n\n      switch (direction) {\n        case 'left':\n          line = this.board[i];\n          line = this.shiftAndCombine(line, i, false);\n          this.board[i] = line;\n          break;\n        case 'right':\n          line = [...this.board[i]].reverse();\n          line = this.shiftAndCombine(line, i, false).reverse();\n          this.board[i] = line;\n          break;\n        case 'up':\n          line = getCol(i);\n          line = this.shiftAndCombine(line, i, true);\n          setCol(i, line);\n          break;\n        case 'down':\n          line = getCol(i).reverse();\n          line = this.shiftAndCombine(line, i, true).reverse();\n          setCol(i, line);\n          break;\n      }\n\n      if (!changed && board[i].join() !== this.board[i].join()) {\n        changed = true;\n      }\n    }\n\n    if (changed) {\n      this.addRandomTile();\n    }\n  }\n\n  start() {\n    this.board = Array.from({ length: BOARD_SIZE }, () => {\n      return Array(BOARD_SIZE).fill(0);\n    });\n    this.score = 0;\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  restart() {\n    this.board = Array.from({ length: BOARD_SIZE }, () => {\n      return Array(BOARD_SIZE).fill(0);\n    });\n    this.score = 0;\n    this.status = 'idle';\n  }\n}\n"],"names":["$a5fd07fa01589658$var$deepClone","arr","map","item","Array","isArray","$09e991522ca7e64e$var$game","constructor","board","from","length","fill","score","status","getState","getScore","getStatus","hasEmpty","hasMoves","row","col","cell","$a5fd07fa01589658$var$BOARD_SIZE","addRandomTile","emptyCells","push","emptyRow","emptyCol","Math","floor","random","newTiles","shiftAndCombine","rowIndex","isCol","filtered","filter","num","merged","i","mergedTiles","concat","move","direction","changed","getCol","setCol","colIndex","newCol","forEach","val","line","reverse","join","start","restart","$09e991522ca7e64e$var$scoreElement","document","querySelector","$09e991522ca7e64e$var$cells","querySelectorAll","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$restartButton","$09e991522ca7e64e$var$renderBoard","textContent","classList","remove","cellElement","className","add","some","t","addEventListener","once","e","directions","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","key"],"version":3,"file":"index.c71cc97a.js.map"}